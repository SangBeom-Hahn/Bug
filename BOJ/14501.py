'''
nxm 크기의 직사각형이 있다. 각 칸은 육지 또는 바다이다. 캐릭터는 동서남북 중 한 곳을 바라본다.
바다로 된 곳은 갈 수 없다. 
1. 현위치, 현 방향을 기준으로 왼쪽 방향부터 차례대로 갈곳을 정한다.
2. 아직 가보지 않은 칸이 존재한다면, 왼쪽 방향으로 회전하고 한칸 전진한다.
3. 가보지 않은 칸이 없다면, 왼쪽 방향으로 회전만 수행하고 1단계로 돌아간다.(다음 왼쪽을 본다 이말)
4. 네 방향 모두 가봤거나 바다로 되어 있으면 
    1] 바라보는 방향을 유지한채로 한칸뒤로 가고 1단계(다음 왼쪽을 본다 이말)
    2] 뒤쪽 방향이 바다인 칸이라 뒤로 갈 수 없다면 움직임을 멈춤
    
메뉴얼에 따라 이동시키고, 캐릭터가 방문한 칸의 수를 구하라

1. 모경수(prt, n=1)
1) 입력을 받는다.
2) 메뉴얼을 만든다.
3) 이동한 칸의 개수를 출력한다.

* n, m
캐릭터가 있는 칸의 좌표 (a, b) d 방향 (0, 1, 2, 3) (북동남서)
맵이 육지인지 바다인지 정보(외각은 무조건 바다)

출력 : 방문한 칸의 개수

2. 시복 : n^2
'''

# 입력을 받는다.
n, m = map(int, input().split())
x, y, d = map(int, input().split())
graph = [list(map(int, input().split())) for _ in range(n)]
visit = [[False] * m for _ in range(n)]

print(*visit, sep = '\n')

# 1. 현위치, 현 방향을 기준으로 왼쪽 방향부터 차례대로 갈곳을 정한다.
# 2. 아직 가보지 않은 칸이 존재한다면, 왼쪽 방향으로 회전하고 한칸 전진한다.
# 3. 가보지 않은 칸이 없다면, 왼쪽 방향으로 회전만 수행하고 1단계로 돌아간다.(다음 왼쪽을 본다 이말)
# 4. 네 방향 모두 가봤거나 바다로 되어 있으면 
#     1] 바라보는 방향을 유지한채로 한칸뒤로 가고 1단계(다음 왼쪽을 본다 이말)
#     2] 뒤쪽 방향이 바다인 칸이라 뒤로 갈 수 없다면 움직임을 멈춤

su = 1
cnt = 1
visit[x][y] = True
# (북동남서)
dx = [-1, 0, 1, 0]
dy = [0, 1, 0, -1]
while(True):
    # 1. 현위치, 현 방향을 기준으로 왼쪽 방향부터 차례대로 갈곳을 정한다.
    # 3. 가보지 않은 칸이 없다면, 왼쪽 방향으로 회전만 수행하고 1단계로 돌아간다.(다음 왼쪽을 본다 이말)
    for i in range(4):
        nd = (d- (i+1) + 4) % 4
        nx = x + dx[nd]
        ny = y + dy[nd]
        
        if(nx < 0 or ny < 0 or nx >= n or ny >= m):
            continue
        
        print(nx, ny)
        # 2. 아직 가보지 않은 칸이 존재한다면, 왼쪽 방향으로 회전하고 한칸 전진한다.
        if(not visit[nx][ny] and graph[nx][ny] == 0):
            print(nx, ny, nd)
            visit[nx][ny] = True
            x = nx
            y = ny
            d = nd
            cnt += 1
            break
    # 4. 네 방향 모두 가봤거나 바다로 되어 있으면 
#     1] 바라보는 방향을 유지한채로 한칸뒤로 가고 1단계(다음 왼쪽을 본다 이말)
#     2] 뒤쪽 방향이 바다인 칸이라 뒤로 갈 수 없다면 움직임을 멈춤
    else: 
        nd = (d+2) % 4 # 뒤를 보지는 않고 이동만 할 거임
        nx = x + dx[nd]
        ny = y + dy[nd]
        print("현위치 : ", x, y, d) # (북동남서)
        print("뒤 : ", nx, ny, nd)
        
        # 뒤쪽 방향이 바다인 칸이라 뒤로 갈 수 없다면 움직임을 멈춤
        if(graph[nx][ny] == 1): 
            print(cnt)
            break
        else:
            # 다 가봤으니 카운트 증가는 없겠지?
            x = nx
            y = ny
            
        
    print(*visit, sep = '\n')
    su += 1        
        
# print(cnt)