'''
올바른 괄호열 : 
1. (), [] : 한 쌍의 괄호로만 이뤄진
2. 올바른 갈호 x면, (x), [x] 모두 
3. x, y가 모두 올바른 갈호면 xy도 

ex) 올바른
(()[[]]), (())[][]
올바른 x
([)]

갈호열의 값 = 값(x)
1. () 의 값 = 2
2. [] 의 값 = 3
3. (x) 의 값은 2 * 값(x)
4. [x] = 3 * 값(x)
5. xy의 값 = 값(x) + 값(y)

(()[[]])([])

()[[]] = 2 + 3 * 3
(()[[]]) = 2 * 11
([]) = 2 * 3

ex) 
() = 열갈호 나오고 닫갈호 나오면 + ( 갈호값
()() = 열갈호 나오고 닫갈호 나오면 + ( 갈호값
([]) = 열갈호 나오고 열갈호 나오면 갈호값 * (        + 2 * (
                                                  2 * (+(2 ))  
                                                  
(()()) = 2 * (2 + 2)
요소    연산                                        결과
(       열갈호 나오고 열갈호 나오면 갈호값 * (          2*(
(       열갈호 나오고 닫갈호 나오면 + ( 갈호값          2*(+(2
)       닫기                                          2*(+(2)
(       열갈호 나오고 닫갈호 나오면 + ( 갈호값          2*(+(2) +(2) )

(()[[]])
요소    연산                                        결과
(       열갈호 나오고 열갈호 나오면 갈호값 * (          2*(
(       열갈호 나오고 닫갈호 나오면 + ( 갈호값          2*(+(2
)                                                     2*(+(2)
[       열갈호 나오고 열갈호 나오면 갈호값 * (          2*(+(2) + 3 *(
[       열갈호 나오고 닫갈호 나오면 + ( 갈호값          2*(+(2) + 3 *( + (3
]                                                    2*(+(2) + 3 *( + (3))           
]                                                    2*(+(2) + 3 *( + (3)))


1. 모경수(prt, n=1)
1) 스택으로 올바른 갈호 검사
2) 열갈호 나오고 열갈호 나오면 + 갈호값 * ( 
3) 열갈호 나오고 닫갈호 나오면 + ( 갈호값


* 갈호열
출 : 값을 계산하라, 올바르지 않으면 0
2. 시복 : n^3
'''

word = input()
stack = []
fail_flag = False
res = ''
for i in range(len(word)):
    
    # 열갈호면
    if(word[i] == '(' or word[i] == '['):
        if(len(word) == 1):
            fail_flag = True
            break
        
        if(i != len(word)-1):
        
            if(word[i+1] == '(' or word[i+1] == '['):
                if(word[i] == '('):
                    res += "+ 2 * ("
                else:
                    res += "+ 3 * ("
            else:
                if(word[i] == '('):
                    res += "+ ( 2"
                else:
                    res += "+ ( 3"
        
        stack.append(word[i])
                
        
    # 닫갈호면
    else:
        if(not stack):
            fail_flag = True
            break
        
        res += ')'
        pop_ele = stack.pop()
        
        if(word[i] == ')'):
            if(pop_ele != '('):
                fail_flag = True
                break
        else:
            if(pop_ele != '['):
                fail_flag = True
                break
            
# print(res)            

if(stack):
    fail_flag = True

if(fail_flag):
    print(0)
else:
    print(eval(res))